import playList from './playlist.js';
import contentTranslation from './translation.js';


const timeElem = document.querySelector('.time');
const dateElem = document.querySelector('.date');
const name = document.querySelector('.name');
const body = document.querySelector('body');
const slidePrev = document.querySelector('.slide-prev');
const slideNext = document.querySelector('.slide-next');
const weatherIcon = document.querySelector('.weather-icon');
const temperature = document.querySelector('.temperature');
const weatherDescription = document.querySelector('.weather-description');
const wind = document.querySelector('.wind');
const humidity = document.querySelector('.humidity');
const city = document.querySelector('.city');
const weatherError = document.querySelector('.weather-error');
const quote = document.querySelector('.quote');
const author = document.querySelector('.author');
const changeQuote = document.querySelector('.change-quote');
const play = document.querySelector('.play');
const playPrevBtn = document.querySelector('.play-prev');
const playNextBtn = document.querySelector('.play-next');
const playListContainer = document.querySelector('.play-list');
const inputsRange= document.querySelectorAll("input[type='range']");
const progressAudio = document.querySelector('#progress');
const trackTitle = document.querySelector('.track-title');
const currentTimeValue= document.querySelector('.current-time');
const durationValue= document.querySelector('.duration');
const volumeSlider= document.querySelector('.volume-slider');
const volumePercentage= document.querySelector('.volume-percentage');
const volumeBnt = document.querySelector('.volume-icon');
const langAll = document.querySelectorAll('[name="lang"]');
const inputHideBlocks = document.querySelectorAll('[name="hideblocks"]');
const todoList = document.querySelector('.todo-list');
const newTodo = document.querySelector('#todo-new')
const sourceimgAll = document.querySelectorAll('[name="sourceimg"]');
let tagImage = document.querySelector('#tag-image').value;


let sourceimg = `${document.querySelector('[name="sourceimg"]:checked').value}`;
let allTodoLabel;
let allTodoDeleteBtn;
let currentLang = `${document.querySelector('[name="lang"]:checked').value}`;
let randomNum;
let playNum = 0;





function showTime() {
  const date = new Date();
  const currentTime = date.toLocaleTimeString();

  timeElem.textContent = currentTime;

  showDate();
  showGreeting();

  setTimeout(showTime, 1000);
}
showTime();


function showDate() {
  const date = new Date();
  const option = {month: 'long',day: 'numeric'}
  const currentWeekDay = date.getDay();
  let currentDate;
  if(currentLang == 'en'){
    currentDate = date.toLocaleDateString('en-En',option);
  } else {
    currentDate = date.toLocaleDateString('ru-Ru',option);
  }
  

  dateElem.textContent =`${contentTranslation.weekday[currentLang][currentWeekDay]}, ${currentDate}`;

  setTimeout(showTime, 1000);
}

function getTimeOfDay() {
  const date = new Date();
  const hours = date.getHours();
  let timeOfDay = '';

  if(hours < 12 && hours > 5) {

    timeOfDay = 'morning';

  } else if(hours < 18 && hours > 11) {

    timeOfDay = 'afternoon';

  } else if(hours <= 23 && hours > 17) {

    timeOfDay = 'evening';

  } else timeOfDay = 'night';
  
  return timeOfDay;
}

function showGreeting() {

  const greeting = document.querySelector('.greeting');
  if(currentLang === 'en') {
    greeting.textContent = `${contentTranslation.greeting[currentLang]} ${contentTranslation.timeofday.en[getTimeOfDay()]}`;
  } else {
    greeting.textContent = `${contentTranslation.greeting.ru[getTimeOfDay()]} ${contentTranslation.timeofday.ru[getTimeOfDay()]}`;
  }
}

function setLocaleStorage() {
  localStorage.setItem('name', name.value);
  localStorage.setItem('city', city.value);
  localStorage.setItem('currentLang', currentLang);
  localStorage.setItem('tagImage', tagImage);
  localStorage.setItem('langChecked', document.querySelector('[name="lang"]:checked').id);
  localStorage.setItem('sourceimg', document.querySelector('[name="sourceimg"]:checked').id);
  if(allTodoLabel) {
    let allValue = [];

    allTodoLabel.forEach((elem) => {
      let value = elem.querySelector('input').value;
      allValue.push(value);
    })

    localStorage.setItem('allValue', allValue);
  }
  

  inputHideBlocks.forEach((input) => {
      let value = input.value;
      localStorage.setItem(value, input.checked);
  });
}

window.addEventListener('beforeunload', setLocaleStorage);

function getLocaleStorage() {

  if(localStorage.getItem('name')) {
    name.value = localStorage.getItem('name');
  }
  

  if(localStorage.getItem('currentLang')) {
    currentLang = localStorage.getItem('currentLang');
  }

  if(localStorage.getItem('city')) {
    city.value = localStorage.getItem('city');
  } else city.value = `${contentTranslation.minsk[currentLang]}`;

  
  if(localStorage.getItem('langChecked')){
    let langChecked = localStorage.getItem('langChecked');
    document.querySelector(`#${langChecked}[name="lang"]`).checked = true;
  }
  

  if(localStorage.getItem('sourceimg')){
    let sourceimgStorage = localStorage.getItem('sourceimg');
    document.querySelector(`#${sourceimgStorage}[name="sourceimg"]`).checked = true;
    sourceimg = `${document.querySelector('[name="sourceimg"]:checked').value}`;
  }
  

  inputHideBlocks.forEach((input) => {
    let value = input.value;

    if(localStorage.getItem(value) == 'true'){
      input.checked = true;
    };
    
    hideVisibleBlockStorage(input, value);
  });

  if(localStorage.getItem('allValue')) {
    let allValue = localStorage.getItem('allValue');
    allValue = allValue.split(',');
    
    allValue.forEach((value) => {
      addNewTodoInLocaleStorage(value);
    })
  }

  if(localStorage.getItem('tagImage')) {
    document.querySelector('#tag-image').value = localStorage.getItem('tagImage');
    tagImage = localStorage.getItem('tagImage');
  }

  getLinkToImagegithub();
  getLinkToImageUnsplash();
  getLinkToImageFlickr();
  setBg();
  getQuotes();
  getWeather();
  langsettings();
}

window.addEventListener('load', getLocaleStorage);



function getRandomNum() {
  randomNum = Math.ceil(Math.random() * 19) + 1;
}
getRandomNum();

//  GITHAB IMG


function getLinkToImagegithub() {
  let timeOfDay;
  if(tagImage) {
    timeOfDay = tagImage;
  } else {
    timeOfDay = getTimeOfDay();
  }

  let bgNum = String(randomNum);
  bgNum = bgNum.padStart(2, 0);
  let imgsrc = `https://raw.githubusercontent.com/rolling-scopes-school/stage1-tasks/assets/images/${timeOfDay}/${bgNum}.jpg`;

  return imgsrc;
}

async function getLinkToImageUnsplash() {
  let timeOfDay;
  if(tagImage) {
    timeOfDay = tagImage;
  } else {
    timeOfDay = getTimeOfDay();
  }

  const url = `https://api.unsplash.com/photos/random?orientation=landscape&query=${timeOfDay}&client_id=tynJmY22ivjosvY3M1A52_-GX88CmyUkzTk6CQXVA08`;
  const result = await fetch(url)
  const data = await result.json();
  
  let imgsrc = data.urls.regular;
  
  return imgsrc;
}

async function getLinkToImageFlickr() {
  let timeOfDay;
  if(tagImage) {
    timeOfDay = tagImage;
  } else {
    timeOfDay = getTimeOfDay();
  }

  const url = `https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=fe8efe9e0abc0963d7602f3e3630726e&tags=${timeOfDay}&extras=url_l&per_page=21&format=json&nojsoncallback=1`;
  const result = await fetch(url)
  const data = await result.json();

  let imgsrc = data.photos.photo[randomNum].url_l;
  
  return imgsrc;
}


async function setBg() {
  const image = new Image();

  if(sourceimg == 'gitHub'){
    image.src =await getLinkToImagegithub();
  }
  if(sourceimg == 'unsplash') {
    image.src =await getLinkToImageUnsplash();
  }
  if(sourceimg == 'flickr') {
    image.src =await getLinkToImageFlickr();
  }

  image.onload = () => {
    body.style.backgroundImage = `url('${image.src}')`;
  };
}

function getSlidePrev() {
  if(sourceimg == 'gitHub' || sourceimg == 'flickr'){
    if(randomNum == 1){
      randomNum = 20;
    } else --randomNum;
    getLinkToImageFlickr();
  }

  if(sourceimg == 'unsplash') {
    getLinkToImageUnsplash();
  }
  
  setBg();
}


function getSlideNext() {
  if(sourceimg == 'gitHub' || sourceimg == 'flickr'){
    if(randomNum == 1){
      randomNum = 20;
    } else --randomNum;
    getLinkToImageFlickr();
  }

  if(sourceimg == 'unsplash') {
    getLinkToImageUnsplash();
  }
  
  setBg();
}



document.addEventListener('load', setBg);
slidePrev.addEventListener('click', getSlidePrev);
slideNext.addEventListener('click', getSlideNext);

sourceimgAll.forEach((elem) => {
  elem.addEventListener('change', () => {

    sourceimg = elem.value;
    setBg();
  });
})





async function getWeather() {  
  const url = `https://api.openweathermap.org/data/2.5/weather?q=${city.value}&lang=${currentLang}&appid=386670cc24cb88e6def69f94f68b07ac&units=metric`;
  const res = await fetch(url);
  const data = await res.json(); 

  weatherIcon.className = 'weather-icon owf';

  if (data.cod == 200) {
    weatherError.textContent = ``;

    weatherIcon.classList.add(`owf-${data.weather[0].id}`);
    temperature.textContent = `${Math.floor(data.main.temp)}Â°C`;
    weatherDescription.textContent = data.weather[0].description;
    wind.textContent = `${contentTranslation.wind[currentLang]}: ${Math.floor(data.wind.speed)} ${contentTranslation.ms[currentLang]}`;
    humidity.textContent = `${contentTranslation.humidity[currentLang]}: ${data.main.humidity}%`;
  } else {

    weatherError.textContent = `Error: ${data.message} for '${city.value}'!`;

    temperature.textContent = ``;
    weatherDescription.textContent = '';
    wind.textContent = ``;
    humidity.textContent = ``;
  }

  
}


function setCity(event) {
  if (event.code === 'Enter') {
    getWeather();
    city.blur();
  }
}


document.addEventListener('DOMContentLoaded', () => {
  if(localStorage.getItem('city')) {
    city.value = localStorage.getItem('city');
  } else city.value = `${contentTranslation.minsk[currentLang]}`;

  getWeather();
})
city.addEventListener('change', getWeather);
city.addEventListener('keypress', setCity);


let randomQuote;

function getRandomQuotes() {
  randomQuote = Math.ceil(Math.random() * 10);
}
getRandomQuotes();



function getQuotes() {
  const quotes = '../assets/quotes/data.json';
  fetch(quotes)
    .then(res => res.json())
    .then(data => {
      
      quote.textContent = data[currentLang][randomQuote].text;
      author.textContent = data[currentLang][randomQuote].author;

    });
}
document.addEventListener('DOMContentLoaded', getQuotes);
changeQuote.addEventListener('click',() => {
  getRandomQuotes();
  getQuotes();
});


const audio = new Audio();

function audioPlayer() {
  audio.src = playList[playNum].src;
  audio.currentTime = 0;
  progressAudio.value = audio.currentTime;
}

document.addEventListener('DOMContentLoaded', audioPlayer);


playList.forEach(elem => {
  const li = document.createElement('li');
  li.classList.add('play-item');
  li.textContent = elem.title;

  playListContainer.append(li);
})

let playItems = document.querySelectorAll('.play-item');
let isPlaying = false;

function togglePlayPause() {
  if(!isPlaying) {
    audio.play();
    isPlaying = true;
  } else {
    audio.pause();
    isPlaying = false;
  }
  playItemActive();
  titleAudioTrack();
}


function togglePlayPauseBtn() {
  play.classList.toggle('pause');
  playItemActive();
  
}

play.addEventListener('click', togglePlayPause);
play.addEventListener('click', togglePlayPauseBtn);
// play.addEventListener('click', () => {
//   document.querySelector('.item-active').classList.toggle('pause');
// });


playItems.forEach((elem, index) => {
  
  elem.addEventListener('click', () => {
    playNum = index;

    audioPlayer();
  
      

    if(elem.classList.contains('item-active')) {

      togglePlayPause();
      togglePlayPauseBtn();
      elem.classList.toggle('pause');
    } else {

      audio.play();
      isPlaying = true;
      elem.classList.add('pause');
      play.classList.add('pause');
    }
    
    AudioProgress();
    playItemActive();
    titleAudioTrack();
    AudioProgress();
  });

  
  
})

function playPrev() {
  
  if(playNum == 0) {
    playNum = playList.length - 1;
  } else {
    playNum--;
  }
  audioPlayer();
  playItemActive();
  titleAudioTrack();
  if(isPlaying) {
    audio.play();
  }
}

function playNext() {
  
  if(playNum == playList. length - 1) {
    playNum = 0;
  } else {
    playNum++;
  }
  audioPlayer();
  playItemActive();
  titleAudioTrack();
  
  if(isPlaying) {
    audio.play();
  }
}


function playItemActive() {
  let playItemsActive = document.querySelector('.item-active');
  if(playItemsActive) {
    playItemsActive.classList.remove('item-active');
  }
  playItems[playNum].classList.add('item-active');
  if(isPlaying) {
    playItems[playNum].classList.add('pause');
  } else {
    playItems[playNum].classList.remove('pause');
  }
}


audio.addEventListener('ended', playNext);
playPrevBtn.addEventListener('click', playPrev);
playNextBtn.addEventListener('click', playNext);










inputsRange.forEach(function(item) {
  item.addEventListener('input', function() {
    const value = this.value;
    // this.style.background = `linear-gradient(to right, #fff 0%, #fff ${value * 100}%, rgb(255, 255, 255, 0.5) ${value * 100}%, rgb(255, 255, 255, 0.5) 100%)`;
  })
})



function AudioProgress() {
  progressAudio.max = audio.duration || 0;
  let progressPercent = (audio.currentTime / audio.duration) || 0;

  let current = formatAudioTime(Math.floor(audio.currentTime)) || '00:00';
  let duration = formatAudioTime(Math.floor(audio.duration));
  if (duration === "NaN:NaN") {
    duration = "0:00";
}
  currentTimeValue.textContent = current;
  durationValue.textContent = duration;
  progressAudio.value = audio.currentTime;
  // progressAudio.style.background = `linear-gradient(to right, #fff 0%, #fff ${progressPercent * 100}%, rgb(255, 255, 255, 0.5) ${progressPercent *100}%, rgb(255, 255, 255, 0.5) 100%)`;
}

function changeProgressBar() {
  audio.currentTime = progressAudio.value;
};

function scrub(elem) {
  const scrubTime = (elem.offsetX / progressAudio.offsetWidth) * audio.duration;
  audio.currentTime = scrubTime;
}


function titleAudioTrack() {
  trackTitle.textContent = playList[playNum].title;
}


function formatAudioTime(s) {
  let minute = Math.floor((s / 60));
  let second = Math.floor(s - (minute * 60));
  if (second < 10){ 
    second  = `0${second}`;
  };
  return `${minute}:${second}`;
};




let mousedown = false;

audio.addEventListener('timeupdate', AudioProgress);
progressAudio.addEventListener('change', changeProgressBar);
progressAudio.addEventListener('mousemove', (e) => mousedown && scrub(e));
progressAudio.addEventListener('mousedown', () => mousedown = true);
progressAudio.addEventListener('mouseup', () => mousedown = false);



function changeVolume(e) {
  const volumeWidth = window.getComputedStyle(volumeSlider).width;

  let newVolume = e.offsetX / parseInt(volumeWidth);
  audio.volume = newVolume;
  volumePercentage.style.width = newVolume * 100 + '%';
}

volumeSlider.addEventListener('click', changeVolume);


function muteToggle() {

  if(volumeBnt.classList.contains('mute')) {
    volumeBnt.classList.remove('mute');
    audio.muted = false;
  } else {
    volumeBnt.classList.add('mute');
    audio.muted = true;
  }

}

volumeBnt.addEventListener('click', muteToggle);




langAll.forEach((elem) => {
  elem.addEventListener('click', () => {
    currentLang = elem.value;

    showDate();
    showGreeting();
    getWeather();
    getQuotes();
    langsettings();
  })
})





const settingBtn = document.querySelector('.setting');

settingBtn.addEventListener('click', () => {
  settingBtn.classList.toggle('open');
  document.querySelector('.setting-window').classList.toggle('visible');
})



function langsettings() {
  const langLabel = document.querySelector('.choose-lang-label');
  const sourceLabel = document.querySelector('.source-label');
  const hideBlocksLabel = document.querySelector('.hide-blocks-label');

  const hideAudioplayer = document.querySelector('.hide-audioplayer span');
  const hideWeather = document.querySelector('.hide-weather span');
  const hideTime = document.querySelector('.hide-time span');
  const hideDate = document.querySelector('.hide-date span');
  const hideGreeting = document.querySelector('.hide-greeting span');
  const hideQuotes = document.querySelector('.hide-quotes span');
  const hideTodo = document.querySelector('.hide-todo span');
  const todayTodo = document.querySelector('.today-todo');
  const todoNew = document.querySelector('#todo-new');
  const tagImage = document.querySelector('#tag-image');
  const todoBtn = document.querySelector('.todo-btn');

  langLabel.textContent = `${contentTranslation.chooselanglabel[currentLang]}`;
  sourceLabel.textContent = `${contentTranslation.sourceLabel[currentLang]}`;
  hideBlocksLabel.textContent = `${contentTranslation.hideBlocksLabel[currentLang]}`;

  hideAudioplayer.textContent = `${contentTranslation.hideAudioplayer[currentLang]}`;
  hideWeather.textContent = `${contentTranslation.hideWeather[currentLang]}`;
  hideTime.textContent = `${contentTranslation.hideTime[currentLang]}`;
  hideDate.textContent = `${contentTranslation.hideDate[currentLang]}`;
  hideGreeting.textContent = `${contentTranslation.hideGreeting[currentLang]}`;
  hideQuotes.textContent = `${contentTranslation.hideQuotes[currentLang]}`;
  hideTodo.textContent = `${contentTranslation.hideTodo[currentLang]}`;
  todayTodo.textContent = `${contentTranslation.todayTodo[currentLang]}`;
  todoNew.placeholder = `${contentTranslation.todoNew[currentLang]}`;
  tagImage.placeholder = `${contentTranslation.tagImage[currentLang]}`;
  todoBtn.textContent = `${contentTranslation.todoBtn[currentLang]}`;
}

document.addEventListener('DOMContentLoaded', langsettings);


function hideVisibleBlock() {
  const inpitValue = this.value;
  const hideblock = document.querySelector(`#${inpitValue}`);
  if(this.checked == true) {
    hideblock.classList.add('hidden');
  } else {
    hideblock.classList.remove('hidden');
  }
}

function hideVisibleBlockStorage(e, value) {
  const hideblock = document.querySelector(`#${value}`);
  if(e.checked == true) {
    hideblock.classList.add('hidden');
  } else {
    hideblock.classList.remove('hidden');
  }
}

inputHideBlocks.forEach((input) => {
  input.addEventListener('change', hideVisibleBlock);
})



const todogBtn = document.querySelector('.todo-btn');

todogBtn.addEventListener('click', () => {
  document.querySelector('.todo-window').classList.toggle('visible');
})




function addNewTodoInLocaleStorage(elem) {
  const todoLabel = document.createElement('label');
  const todo = document.createElement('input');
  const todoLabelSpan = document.createElement('span');
  const todoDeleteBtn = document.createElement('button');

  todo.setAttribute('type', 'checkbox');
  todo.setAttribute('name', 'todolist');
  todo.value = elem;

  todoLabelSpan.textContent = elem;

  todoLabel.append(todo);
  todoLabel.append(todoLabelSpan);
  todoLabel.append(todoDeleteBtn);

  todoList.append(todoLabel);
  allTodoLabel = document.querySelectorAll('.todo-list label');
  allTodoDeleteBtn = document.querySelectorAll('.todo-list button');
  eventTodoRemove()
}




function addNewTodo() {
  const todoLabel = document.createElement('label');
  const todo = document.createElement('input');
  const todoLabelSpan = document.createElement('span');
  const todoDeleteBtn = document.createElement('button');

  todo.setAttribute('type', 'checkbox');
  todo.setAttribute('name', 'todolist');
  todo.value = newTodo.value;

  todoLabelSpan.textContent = newTodo.value;

  todoLabel.append(todo);
  todoLabel.append(todoLabelSpan);
  todoLabel.append(todoDeleteBtn);

  todoList.append(todoLabel);
  allTodoLabel = document.querySelectorAll('.todo-list label');
  allTodoDeleteBtn = document.querySelectorAll('.todo-list button');
  eventTodoRemove()
}


newTodo.addEventListener('keypress', (e) => {
  if(e.code == 'Enter') {
    addNewTodo();
    newTodo.value = '';
  }
})


function removeTodo() {
  this.closest('label').remove();
  allTodoLabel = document.querySelectorAll('.todo-list label');
  allTodoDeleteBtn = document.querySelectorAll('.todo-list button');
  eventTodoRemove()
}

function eventTodoRemove() {
  allTodoDeleteBtn.forEach((elem)=> {
    elem.addEventListener('click', removeTodo);
  })
}


document.querySelector('#tag-image').addEventListener('keypress', (e) => {
  if(e.code == 'Enter') {
    tagImage = e.target.value;


    getLinkToImagegithub();
    getLinkToImageUnsplash();
    getLinkToImageFlickr();
    setBg();
  }
});




let sselfAssessment = `
ÐÐ°ÑÐ° Ð¾ÑÐµÐ½ÐºÐ° - 163 Ð±Ð°Ð»Ð»Ð° 
ÐÑÐ·ÑÐ² Ð¿Ð¾ Ð¿ÑÐ½ÐºÑÐ°Ð¼ Ð¢Ð:

ÐÑÐ¸Ð²ÐµÑ! Ð¡Ð¿Ð°ÑÐ¸Ð±Ð¾ Ð·Ð° Ð¿ÑÐ¾Ð²ÐµÑÐºÑ Ð¼Ð¾ÐµÐ³Ð¾ Ð·Ð°Ð´Ð°Ð½Ð¸Ñ, Ð²ÑÐ¾Ð´Ðµ Ð±Ñ ÑÐ´ÐµÐ»Ð°Ð½Ð¾ Ð²ÑÐµ ÑÑÐ¾ ÑÑÐµÐ±ÑÐµÑÑÑ Ðº Ð¿ÑÐ¾Ð²ÐµÑÐºÐµ. 
ÐÐ´Ð¸Ð½ÑÑÐ²ÐµÐ½Ð½Ð¾Ðµ ÑÐ¾ÑÐºÐ¸ Ñ Flickr Ð³ÑÑÐ·ÑÑÑÑ Ð¿Ð¾ÑÐµÐ¼Ñ-ÑÐ¾ Ð´Ð¾Ð»Ð³Ð¾Ð²Ð°ÑÐ¾.
ÐÑÐ»Ð¸ Ð±ÑÐ´ÑÑ Ð²Ð¾Ð¿ÑÐ¾ÑÑ Ð¼Ð¾Ð¶ÐµÑÐµ ÑÐ¼ÐµÐ»Ð¾ Ð¼Ð½Ðµ Ð¿Ð¸ÑÐ°ÑÑ!

ÐÑÐ¿Ð¾Ð»Ð½ÐµÐ½Ð½ÑÐµ Ð¿ÑÐ½ÐºÑÑ:
1) Ð²ÑÐµÐ¼Ñ Ð²ÑÐ²Ð¾Ð´Ð¸ÑÑÑ Ð² 24-ÑÐ°ÑÐ¾Ð²Ð¾Ð¼ ÑÐ¾ÑÐ¼Ð°ÑÐµ, Ð½Ð°Ð¿ÑÐ¸Ð¼ÐµÑ: 21:01:00 

2) Ð²ÑÐµÐ¼Ñ Ð¾Ð±Ð½Ð¾Ð²Ð»ÑÐµÑÑÑ ÐºÐ°Ð¶Ð´ÑÑ ÑÐµÐºÑÐ½Ð´Ñ - ÑÐ°ÑÑ Ð¸Ð´ÑÑ. ÐÐ¾Ð³Ð´Ð° Ð¼ÐµÐ½ÑÐµÑÑÑ Ð¾Ð´Ð½Ð° Ð¸Ð· ÑÐ¸ÑÑ, Ð¾ÑÑÐ°Ð»ÑÐ½ÑÐµ Ð¿ÑÐ¸ ÑÑÐ¾Ð¼ Ð½Ðµ Ð¼ÐµÐ½ÑÑÑ ÑÐ²Ð¾Ñ Ð¿Ð¾Ð»Ð¾Ð¶ÐµÐ½Ð¸Ðµ Ð½Ð° ÑÑÑÐ°Ð½Ð¸ÑÐµ (Ð²ÑÐµÐ¼Ñ Ð½Ðµ Ð´ÑÑÐ³Ð°ÐµÑÑÑ) 

3) Ð²ÑÐ²Ð¾Ð´Ð¸ÑÑÑ Ð´ÐµÐ½Ñ Ð½ÐµÐ´ÐµÐ»Ð¸, ÑÐ¸ÑÐ»Ð¾, Ð¼ÐµÑÑÑ, Ð½Ð°Ð¿ÑÐ¸Ð¼ÐµÑ: "ÐÐ¾ÑÐºÑÐµÑÐµÐ½ÑÐµ, 16 Ð¼Ð°Ñ" / "Sunday, May 16" / "ÐÑÐ´Ð·ÐµÐ»Ñ, 16 ÑÑÐ°ÑÐ½Ñ" 

4) ÑÐµÐºÑÑ Ð¿ÑÐ¸Ð²ÐµÑÑÑÐ²Ð¸Ñ Ð¼ÐµÐ½ÑÐµÑÑÑ Ð² Ð·Ð°Ð²Ð¸ÑÐ¸Ð¼Ð¾ÑÑÐ¸ Ð¾Ñ Ð²ÑÐµÐ¼ÐµÐ½Ð¸ ÑÑÑÐ¾Ðº (ÑÑÑÐ¾, Ð´ÐµÐ½Ñ, Ð²ÐµÑÐµÑ, Ð½Ð¾ÑÑ). ÐÑÐ¾Ð²ÐµÑÑÐµÑÑÑ ÑÐ¾Ð¾ÑÐ²ÐµÑÑÑÐ²Ð¸Ðµ Ð¿ÑÐ¸Ð²ÐµÑÑÑÐ²Ð¸Ñ ÑÐµÐºÑÑÐµÐ¼Ñ Ð²ÑÐµÐ¼ÐµÐ½Ð¸ ÑÑÑÐ¾Ðº 

5) Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»Ñ Ð¼Ð¾Ð¶ÐµÑ Ð²Ð²ÐµÑÑÐ¸ ÑÐ²Ð¾Ñ Ð¸Ð¼Ñ. ÐÑÐ¸ Ð¿ÐµÑÐµÐ·Ð°Ð³ÑÑÐ·ÐºÐµ ÑÑÑÐ°Ð½Ð¸ÑÑ Ð¿ÑÐ¸Ð»Ð¾Ð¶ÐµÐ½Ð¸Ñ Ð¸Ð¼Ñ Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»Ñ ÑÐ¾ÑÑÐ°Ð½ÑÐµÑÑÑ 

6) ÑÑÑÐ»ÐºÐ° Ð½Ð° ÑÐ¾Ð½Ð¾Ð²Ð¾Ðµ Ð¸Ð·Ð¾Ð±ÑÐ°Ð¶ÐµÐ½Ð¸Ðµ ÑÐ¾ÑÐ¼Ð¸ÑÑÐµÑÑÑ Ñ ÑÑÑÑÐ¾Ð¼ Ð²ÑÐµÐ¼ÐµÐ½Ð¸ ÑÑÑÐ¾Ðº Ð¸ ÑÐ»ÑÑÐ°Ð¹Ð½Ð¾Ð³Ð¾ Ð½Ð¾Ð¼ÐµÑÐ° Ð¸Ð·Ð¾Ð±ÑÐ°Ð¶ÐµÐ½Ð¸Ñ (Ð¾Ñ 01 Ð´Ð¾ 20). ÐÑÐ¾Ð²ÐµÑÑÐµÐ¼, ÑÑÐ¾ Ð¿ÑÐ¸ Ð¿ÐµÑÐµÐ·Ð°Ð³ÑÑÐ·ÐºÐµ ÑÑÑÐ°Ð½Ð¸ÑÑ ÑÐ¾Ð½Ð¾Ð²Ð¾Ðµ Ð¸Ð·Ð¾Ð±ÑÐ°Ð¶ÐµÐ½Ð¸Ðµ Ð¸Ð·Ð¼ÐµÐ½Ð¸Ð»Ð¾ÑÑ. ÐÑÐ»Ð¸ Ð½Ðµ Ð¸Ð·Ð¼ÐµÐ½Ð¸Ð»Ð¾ÑÑ, Ð¿ÐµÑÐµÐ·Ð°Ð³ÑÑÐ¶Ð°ÐµÐ¼ ÑÑÑÐ°Ð½Ð¸ÑÑ ÐµÑÑ ÑÐ°Ð· 

7) Ð¸Ð·Ð¾Ð±ÑÐ°Ð¶ÐµÐ½Ð¸Ñ Ð¼Ð¾Ð¶Ð½Ð¾ Ð¿ÐµÑÐµÐ»Ð¸ÑÑÑÐ²Ð°ÑÑ ÐºÐ»Ð¸ÐºÐ°Ð¼Ð¸ Ð¿Ð¾ ÑÑÑÐµÐ»ÐºÐ°Ð¼, ÑÐ°ÑÐ¿Ð¾Ð»Ð¾Ð¶ÐµÐ½Ð½ÑÐ¼ Ð¿Ð¾ Ð±Ð¾ÐºÐ°Ð¼ ÑÐºÑÐ°Ð½Ð°.ÐÐ·Ð¾Ð±ÑÐ°Ð¶ÐµÐ½Ð¸Ñ Ð¿ÐµÑÐµÐ»Ð¸ÑÑÑÐ²Ð°ÑÑÑÑ Ð¿Ð¾ÑÐ»ÐµÐ´Ð¾Ð²Ð°ÑÐµÐ»ÑÐ½Ð¾ - Ð¿Ð¾ÑÐ»Ðµ 18 Ð¸Ð·Ð¾Ð±ÑÐ°Ð¶ÐµÐ½Ð¸Ñ Ð¸Ð´ÑÑ 19 (ÐºÐ»Ð¸Ðº Ð¿Ð¾ Ð¿ÑÐ°Ð²Ð¾Ð¹ ÑÑÑÐµÐ»ÐºÐµ), Ð¿ÐµÑÐµÐ´ 18 Ð¸Ð·Ð¾Ð±ÑÐ°Ð¶ÐµÐ½Ð¸ÐµÐ¼ Ð¸Ð´ÑÑ 17 (ÐºÐ»Ð¸Ðº Ð¿Ð¾ Ð»ÐµÐ²Ð¾Ð¹ ÑÑÑÐµÐ»ÐºÐµ) 

8) Ð¸Ð·Ð¾Ð±ÑÐ°Ð¶ÐµÐ½Ð¸Ñ Ð¿ÐµÑÐµÐ»Ð¸ÑÑÑÐ²Ð°ÑÑÑÑ Ð¿Ð¾ ÐºÑÑÐ³Ñ: Ð¿Ð¾ÑÐ»Ðµ Ð´Ð²Ð°Ð´ÑÐ°ÑÐ¾Ð³Ð¾ Ð¸Ð·Ð¾Ð±ÑÐ°Ð¶ÐµÐ½Ð¸Ñ Ð¸Ð´ÑÑ Ð¿ÐµÑÐ²Ð¾Ðµ (ÐºÐ»Ð¸Ðº Ð¿Ð¾ Ð¿ÑÐ°Ð²Ð¾Ð¹ ÑÑÑÐµÐ»ÐºÐµ), Ð¿ÐµÑÐµÐ´ 1 Ð¸Ð·Ð¾Ð±ÑÐ°Ð¶ÐµÐ½Ð¸ÐµÐ¼ Ð¸Ð´ÑÑ 20 (ÐºÐ»Ð¸Ðº Ð¿Ð¾ Ð»ÐµÐ²Ð¾Ð¹ ÑÑÑÐµÐ»ÐºÐµ) 

9) Ð¿ÑÐ¸ ÑÐ¼ÐµÐ½Ðµ ÑÐ»Ð°Ð¹Ð´Ð¾Ð² Ð²Ð°Ð¶Ð½Ð¾ Ð¾Ð±ÐµÑÐ¿ÐµÑÐ¸ÑÑ Ð¿Ð»Ð°Ð²Ð½ÑÑ ÑÐ¼ÐµÐ½Ñ ÑÐ¾Ð½Ð¾Ð²ÑÑ Ð¸Ð·Ð¾Ð±ÑÐ°Ð¶ÐµÐ½Ð¸Ð¹. ÐÐ»Ð°Ð²Ð½ÑÑ ÑÐ¼ÐµÐ½Ñ ÑÐ¾Ð½Ð¾Ð²ÑÑ Ð¸Ð·Ð¾Ð±ÑÐ°Ð¶ÐµÐ½Ð¸Ð¹ Ð½Ðµ Ð¿ÑÐ¾Ð²ÐµÑÑÐµÐ¼: 1) Ð¿ÑÐ¸ Ð·Ð°Ð³ÑÑÐ·ÐºÐµ Ð¸ Ð¿ÐµÑÐµÐ·Ð°Ð³ÑÑÐ·ÐºÐµ ÑÑÑÐ°Ð½Ð¸ÑÑ 2) Ð¿ÑÐ¸ Ð¾ÑÐºÑÑÑÐ¾Ð¹ ÐºÐ¾Ð½ÑÐ¾Ð»Ð¸ Ð±ÑÐ°ÑÐ·ÐµÑÐ° 3) Ð¿ÑÐ¸ ÑÐ»Ð¸ÑÐºÐ¾Ð¼ ÑÐ°ÑÑÑÑ ÐºÐ»Ð¸ÐºÐ°Ñ Ð¿Ð¾ ÑÑÑÐµÐ»ÐºÐ°Ð¼ Ð´Ð»Ñ ÑÐ¼ÐµÐ½Ñ Ð¸Ð·Ð¾Ð±ÑÐ°Ð¶ÐµÐ½Ð¸Ñ 

10) Ð¿ÑÐ¸ Ð¿ÐµÑÐµÐ·Ð°Ð³ÑÑÐ·ÐºÐµ ÑÑÑÐ°Ð½Ð¸ÑÑ Ð¿ÑÐ¸Ð»Ð¾Ð¶ÐµÐ½Ð¸Ñ ÑÐºÐ°Ð·Ð°Ð½Ð½ÑÐ¹ Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»ÐµÐ¼ Ð³Ð¾ÑÐ¾Ð´ ÑÐ¾ÑÑÐ°Ð½ÑÐµÑÑÑ, Ð´Ð°Ð½Ð½ÑÐµ Ð¾ Ð½ÑÐ¼ ÑÑÐ°Ð½ÑÑÑÑ Ð² local storage 

11) Ð´Ð»Ñ ÑÐºÐ°Ð·Ð°Ð½Ð½Ð¾Ð³Ð¾ Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»ÐµÐ¼ Ð½Ð°ÑÐµÐ»ÑÐ½Ð½Ð¾Ð³Ð¾ Ð¿ÑÐ½ÐºÑÐ° Ð²ÑÐ²Ð¾Ð´ÑÑÑÑ Ð´Ð°Ð½Ð½ÑÐµ Ð¾ Ð¿Ð¾Ð³Ð¾Ð´Ðµ, ÐµÑÐ»Ð¸ Ð¸Ñ Ð²Ð¾Ð·Ð²ÑÐ°ÑÐ°ÐµÑ API. ÐÐ°Ð½Ð½ÑÐµ Ð¾ Ð¿Ð¾Ð³Ð¾Ð´Ðµ Ð²ÐºÐ»ÑÑÐ°ÑÑ Ð² ÑÐµÐ±Ñ: Ð¸ÐºÐ¾Ð½ÐºÑ Ð¿Ð¾Ð³Ð¾Ð´Ñ, Ð¾Ð¿Ð¸ÑÐ°Ð½Ð¸Ðµ Ð¿Ð¾Ð³Ð¾Ð´Ñ, ÑÐµÐ¼Ð¿ÐµÑÐ°ÑÑÑÑ Ð² Â°C, ÑÐºÐ¾ÑÐ¾ÑÑÑ Ð²ÐµÑÑÐ° Ð² Ð¼/Ñ, Ð¾ÑÐ½Ð¾ÑÐ¸ÑÐµÐ»ÑÐ½ÑÑ Ð²Ð»Ð°Ð¶Ð½Ð¾ÑÑÑ Ð²Ð¾Ð·Ð´ÑÑÐ° Ð² %. Ð§Ð¸ÑÐ»Ð¾Ð²ÑÐµ Ð¿Ð°ÑÐ°Ð¼ÐµÑÑÑ Ð¿Ð¾Ð³Ð¾Ð´Ñ Ð¾ÐºÑÑÐ³Ð»ÑÑÑÑÑ Ð´Ð¾ ÑÐµÐ»ÑÑ ÑÐ¸ÑÐµÐ» 

12) Ð²ÑÐ²Ð¾Ð´Ð¸ÑÑÑ ÑÐ²ÐµÐ´Ð¾Ð¼Ð»ÐµÐ½Ð¸Ðµ Ð¾Ð± Ð¾ÑÐ¸Ð±ÐºÐµ Ð¿ÑÐ¸ Ð²Ð²Ð¾Ð´Ðµ Ð½ÐµÐºÐ¾ÑÑÐµÐºÑÐ½ÑÑ Ð·Ð½Ð°ÑÐµÐ½Ð¸Ð¹, Ð´Ð»Ñ ÐºÐ¾ÑÐ¾ÑÑÑ API Ð½Ðµ Ð²Ð¾Ð·Ð²ÑÐ°ÑÐ°ÐµÑ Ð¿Ð¾Ð³Ð¾Ð´Ñ (Ð¿ÑÑÑÐ°Ñ ÑÑÑÐ¾ÐºÐ° Ð¸Ð»Ð¸ Ð±ÐµÑÑÐ¼ÑÑÐ»ÐµÐ½Ð½ÑÐ¹ Ð½Ð°Ð±Ð¾Ñ ÑÐ¸Ð¼Ð²Ð¾Ð»Ð¾Ð²) 

13) Ð¿ÑÐ¸ Ð·Ð°Ð³ÑÑÐ·ÐºÐµ ÑÑÑÐ°Ð½Ð¸ÑÑ Ð¿ÑÐ¸Ð»Ð¾Ð¶ÐµÐ½Ð¸Ñ Ð¾ÑÐ¾Ð±ÑÐ°Ð¶Ð°ÐµÑÑÑ ÑÐ°Ð½Ð´Ð¾Ð¼Ð½Ð°Ñ ÑÐ¸ÑÐ°ÑÐ° Ð¸ ÐµÑ Ð°Ð²ÑÐ¾Ñ 

14) Ð¿ÑÐ¸ Ð¿ÐµÑÐµÐ·Ð°Ð³ÑÑÐ·ÐºÐµ ÑÑÑÐ°Ð½Ð¸ÑÑ ÑÐ¸ÑÐ°ÑÐ° Ð¾Ð±Ð½Ð¾Ð²Ð»ÑÐµÑÑÑ (Ð·Ð°Ð¼ÐµÐ½ÑÐµÑÑÑ Ð½Ð° Ð´ÑÑÐ³ÑÑ). ÐÑÑÑ ÐºÐ½Ð¾Ð¿ÐºÐ°, Ð¿ÑÐ¸ ÐºÐ»Ð¸ÐºÐµ Ð¿Ð¾ ÐºÐ¾ÑÐ¾ÑÐ¾Ð¹ ÑÐ¸ÑÐ°ÑÐ° Ð¾Ð±Ð½Ð¾Ð²Ð»ÑÐµÑÑÑ (Ð·Ð°Ð¼ÐµÐ½ÑÐµÑÑÑ Ð½Ð° Ð´ÑÑÐ³ÑÑ) 

15) Ð¿ÑÐ¸ ÐºÐ»Ð¸ÐºÐµ Ð¿Ð¾ ÐºÐ½Ð¾Ð¿ÐºÐµ Play/Pause Ð¿ÑÐ¾Ð¸Ð³ÑÑÐ²Ð°ÐµÑÑÑ Ð¿ÐµÑÐ²ÑÐ¹ ÑÑÐµÐº Ð¸Ð· Ð±Ð»Ð¾ÐºÐ° play-list, Ð¸ÐºÐ¾Ð½ÐºÐ° ÐºÐ½Ð¾Ð¿ÐºÐ¸ Ð¼ÐµÐ½ÑÐµÑÑÑ Ð½Ð° Pause 

16) Ð¿ÑÐ¸ ÐºÐ»Ð¸ÐºÐµ Ð¿Ð¾ ÐºÐ½Ð¾Ð¿ÐºÐµ Play/Pause Ð²Ð¾ Ð²ÑÐµÐ¼Ñ Ð¿ÑÐ¾Ð¸Ð³ÑÑÐ²Ð°Ð½Ð¸Ñ ÑÑÐµÐºÐ°, Ð¾ÑÑÐ°Ð½Ð°Ð²Ð»Ð¸Ð²Ð°ÐµÑÑÑ Ð¿ÑÐ¾Ð¸Ð³ÑÑÐ²Ð°Ð½Ð¸Ðµ ÑÑÐµÐºÐ°, Ð¸ÐºÐ¾Ð½ÐºÐ° ÐºÐ½Ð¾Ð¿ÐºÐ¸ Ð¼ÐµÐ½ÑÐµÑÑÑ Ð½Ð° Play 

17) ÑÑÐµÐºÐ¸ Ð¿ÑÐ¾Ð»Ð¸ÑÑÑÐ²Ð°ÑÑÑÑ Ð¿Ð¾ ÐºÑÑÐ³Ñ - Ð¿Ð¾ÑÐ»Ðµ Ð¿Ð¾ÑÐ»ÐµÐ´Ð½ÐµÐ³Ð¾ Ð¸Ð´ÑÑ Ð¿ÐµÑÐ²ÑÐ¹ (ÐºÐ»Ð¸Ðº Ð¿Ð¾ ÐºÐ½Ð¾Ð¿ÐºÐµ Play-next), Ð¿ÐµÑÐµÐ´ Ð¿ÐµÑÐ²ÑÐ¼ - Ð¿Ð¾ÑÐ»ÐµÐ´Ð½Ð¸Ð¹ (ÐºÐ»Ð¸Ðº Ð¿Ð¾ ÐºÐ½Ð¾Ð¿ÐºÐµ Play-prev) 

18) ÑÑÐµÐº, ÐºÐ¾ÑÐ¾ÑÑÐ¹ Ð² Ð´Ð°Ð½Ð½ÑÐ¹ Ð¼Ð¾Ð¼ÐµÐ½Ñ Ð¿ÑÐ¾Ð¸Ð³ÑÑÐ²Ð°ÐµÑÑÑ, Ð² Ð±Ð»Ð¾ÐºÐµ Play-list Ð²ÑÐ´ÐµÐ»ÑÐµÑÑÑ ÑÑÐ¸Ð»ÐµÐ¼ 

19) Ð¿Ð¾ÑÐ»Ðµ Ð¾ÐºÐ¾Ð½ÑÐ°Ð½Ð¸Ñ Ð¿ÑÐ¾Ð¸Ð³ÑÑÐ²Ð°Ð½Ð¸Ñ Ð¿ÐµÑÐ²Ð¾Ð³Ð¾ ÑÑÐµÐºÐ°, Ð°Ð²ÑÐ¾Ð¼Ð°ÑÐ¸ÑÐµÑÐºÐ¸ Ð·Ð°Ð¿ÑÑÐºÐ°ÐµÑÑÑ Ð¿ÑÐ¾Ð¸Ð³ÑÑÐ²Ð°Ð½Ð¸Ðµ ÑÐ»ÐµÐ´ÑÑÑÐµÐ³Ð¾. Ð¢ÑÐµÐºÐ¸ Ð¿ÑÐ¾Ð¸Ð³ÑÑÐ²Ð°ÑÑÑÑ Ð¿Ð¾ ÐºÑÑÐ³Ñ: Ð¿Ð¾ÑÐ»Ðµ Ð¿Ð¾ÑÐ»ÐµÐ´Ð½ÐµÐ³Ð¾ ÑÐ½Ð¾Ð²Ð° Ð¿ÑÐ¾Ð¸Ð³ÑÑÐ²Ð°ÐµÑÑÑ Ð¿ÐµÑÐ²ÑÐ¹. 

20) Ð´Ð¾Ð±Ð°Ð²Ð»ÐµÐ½ Ð¿ÑÐ¾Ð³ÑÐµÑÑ-Ð±Ð°Ñ Ð² ÐºÐ¾ÑÐ¾ÑÐ¾Ð¼ Ð¾ÑÐ¾Ð±ÑÐ°Ð¶Ð°ÐµÑÑÑ Ð¿ÑÐ¾Ð³ÑÐµÑÑ Ð¿ÑÐ¾Ð¸Ð³ÑÑÐ²Ð°Ð½Ð¸Ñ 

21) Ð¿ÑÐ¸ Ð¿ÐµÑÐµÐ¼ÐµÑÐµÐ½Ð¸Ð¸ Ð¿Ð¾Ð»Ð·ÑÐ½ÐºÐ° Ð¿ÑÐ¾Ð³ÑÐµÑÑ-Ð±Ð°ÑÐ° Ð¼ÐµÐ½ÑÐµÑÑÑ ÑÐµÐºÑÑÐµÐµ Ð²ÑÐµÐ¼Ñ Ð²Ð¾ÑÐ¿ÑÐ¾Ð¸Ð·Ð²ÐµÐ´ÐµÐ½Ð¸Ñ ÑÑÐµÐºÐ° 

22) Ð½Ð°Ð´ Ð¿ÑÐ¾Ð³ÑÐµÑÑ-Ð±Ð°ÑÐ¾Ð¼ Ð¾ÑÐ¾Ð±ÑÐ°Ð¶Ð°ÐµÑÑÑ Ð½Ð°Ð·Ð²Ð°Ð½Ð¸Ðµ ÑÑÐµÐºÐ° 

23) Ð¾ÑÐ¾Ð±ÑÐ°Ð¶Ð°ÐµÑÑÑ ÑÐµÐºÑÑÐµÐµ Ð¸ Ð¾Ð±ÑÐµÐµ Ð²ÑÐµÐ¼Ñ Ð²Ð¾ÑÐ¿ÑÐ¾Ð¸Ð·Ð²ÐµÐ´ÐµÐ½Ð¸Ñ ÑÑÐµÐºÐ° 

24) ÐµÑÑÑ ÐºÐ½Ð¾Ð¿ÐºÐ° Ð·Ð²ÑÐºÐ° Ð¿ÑÐ¸ ÐºÐ»Ð¸ÐºÐµ Ð¿Ð¾ ÐºÐ¾ÑÐ¾ÑÐ¾Ð¹ Ð¼Ð¾Ð¶Ð½Ð¾ Ð²ÐºÐ»ÑÑÐ¸ÑÑ/Ð¾ÑÐºÐ»ÑÑÐ¸ÑÑ Ð·Ð²ÑÐº 

25) Ð´Ð¾Ð±Ð°Ð²Ð»ÐµÐ½ ÑÐµÐ³ÑÐ»ÑÑÐ¾Ñ Ð³ÑÐ¾Ð¼ÐºÐ¾ÑÑÐ¸, Ð¿ÑÐ¸ Ð¿ÐµÑÐµÐ¼ÐµÑÐµÐ½Ð¸Ð¸ Ð¿Ð¾Ð»Ð·ÑÐ½ÐºÐ° ÑÐµÐ³ÑÐ»ÑÑÐ¾ÑÐ° Ð³ÑÐ¾Ð¼ÐºÐ¾ÑÑÐ¸ Ð¼ÐµÐ½ÑÐµÑÑÑ Ð³ÑÐ¾Ð¼ÐºÐ¾ÑÑÑ Ð¿ÑÐ¾Ð¸Ð³ÑÑÐ²Ð°Ð½Ð¸Ñ Ð·Ð²ÑÐºÐ° 

26) Ð¼Ð¾Ð¶Ð½Ð¾ Ð·Ð°Ð¿ÑÑÑÐ¸ÑÑ Ð¸ Ð¾ÑÑÐ°Ð½Ð¾Ð²Ð¸ÑÑ Ð¿ÑÐ¾Ð¸Ð³ÑÑÐ²Ð°Ð½Ð¸Ñ ÑÑÐµÐºÐ° ÐºÐ»Ð¸ÐºÐ¾Ð¼ Ð¿Ð¾ ÐºÐ½Ð¾Ð¿ÐºÐµ Play/Pause ÑÑÐ´Ð¾Ð¼ Ñ Ð½Ð¸Ð¼ Ð² Ð¿Ð»ÐµÐ¹Ð»Ð¸ÑÑÐµ 

27) Ð¿ÐµÑÐµÐ²Ð¾Ð´Ð¸ÑÑÑ ÑÐ·ÑÐº Ð¸ Ð¼ÐµÐ½ÑÐµÑÑÑ ÑÐ¾ÑÐ¼Ð°Ñ Ð¾ÑÐ¾Ð±ÑÐ°Ð¶ÐµÐ½Ð¸Ñ Ð´Ð°ÑÑ 

28) Ð¿ÐµÑÐµÐ²Ð¾Ð´Ð¸ÑÑÑ Ð¿ÑÐ¸Ð²ÐµÑÑÑÐ²Ð¸Ðµ 

29) Ð¿ÐµÑÐµÐ²Ð¾Ð´Ð¸ÑÑÑ Ð¿ÑÐ¾Ð³Ð½Ð¾Ð· Ð¿Ð¾Ð³Ð¾Ð´Ñ Ð² Ñ.Ñ Ð¾Ð¿Ð¸ÑÐ°Ð½Ð¸Ðµ Ð¿Ð¾Ð³Ð¾Ð´Ñ 

30) Ð¿ÐµÑÐµÐ²Ð¾Ð´Ð¸ÑÑÑ ÑÐ¸ÑÐ°ÑÐ° Ð´Ð½Ñ  

31) Ð¿ÐµÑÐµÐ²Ð¾Ð´ÑÑÑÑ Ð½Ð°ÑÑÑÐ¾Ð¹ÐºÐ¸ Ð¿ÑÐ¸Ð»Ð¾Ð¶ÐµÐ½Ð¸Ñ, Ð¿ÑÐ¸ Ð¿ÐµÑÐµÐºÐ»ÑÑÐµÐ½Ð¸Ð¸ ÑÐ·ÑÐºÐ° Ð¿ÑÐ¸Ð»Ð¾Ð¶ÐµÐ½Ð¸Ñ Ð² Ð½Ð°ÑÑÑÐ¾Ð¹ÐºÐ°Ñ, ÑÐ·ÑÐº Ð½Ð°ÑÑÑÐ¾ÐµÐº ÑÐ¾Ð¶Ðµ Ð¼ÐµÐ½ÑÐµÑÑÑ 

32) Ð² ÐºÐ°ÑÐµÑÑÐ²Ðµ Ð¸ÑÑÐ¾ÑÐ½Ð¸ÐºÐ° Ð¸Ð·Ð¾Ð±ÑÐ°Ð¶ÐµÐ½Ð¸Ð¹ Ð¼Ð¾Ð¶ÐµÑ Ð¸ÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÑÑÑ Unsplash API 

33) Ð² ÐºÐ°ÑÐµÑÑÐ²Ðµ Ð¸ÑÑÐ¾ÑÐ½Ð¸ÐºÐ° Ð¸Ð·Ð¾Ð±ÑÐ°Ð¶ÐµÐ½Ð¸Ð¹ Ð¼Ð¾Ð¶ÐµÑ Ð¸ÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÑÑÑ Flickr API 

34) Ð² Ð½Ð°ÑÑÑÐ¾Ð¹ÐºÐ°Ñ Ð¿ÑÐ¸Ð»Ð¾Ð¶ÐµÐ½Ð¸Ñ Ð¼Ð¾Ð¶Ð½Ð¾ ÑÐºÐ°Ð·Ð°ÑÑ ÑÐ·ÑÐº Ð¿ÑÐ¸Ð»Ð¾Ð¶ÐµÐ½Ð¸Ñ (en/ru Ð¸Ð»Ð¸ en/be)  

35) ÑÐ·ÑÐº Ð½Ð°ÑÑÑÐ¾ÐµÐº Ð¾Ð¿ÑÐµÐ´ÐµÐ»ÑÐµÑÑÑ ÑÐ·ÑÐºÐ¾Ð¼ Ð¿ÑÐ¸Ð»Ð¾Ð¶ÐµÐ½Ð¸Ñ, Ð¿ÑÐ¸ Ð¿ÐµÑÐµÐºÐ»ÑÑÐµÐ½Ð¸Ð¸ ÑÐ·ÑÐºÐ° Ð¿ÑÐ¸Ð»Ð¾Ð¶ÐµÐ½Ð¸Ñ, ÑÐ·ÑÐº Ð½Ð°ÑÑÑÐ¾ÐµÐº ÑÐ¾Ð¶Ðµ Ð¼ÐµÐ½ÑÐµÑÑÑ 

36) Ð² Ð½Ð°ÑÑÑÐ¾Ð¹ÐºÐ°Ñ Ð¿ÑÐ¸Ð»Ð¾Ð¶ÐµÐ½Ð¸Ñ Ð¼Ð¾Ð¶Ð½Ð¾ ÑÐºÐ°Ð·Ð°ÑÑ Ð¸ÑÑÐ¾ÑÐ½Ð¸Ðº Ð¿Ð¾Ð»ÑÑÐµÐ½Ð¸Ñ ÑÐ¾ÑÐ¾ Ð´Ð»Ñ ÑÐ¾Ð½Ð¾Ð²Ð¾Ð³Ð¾ Ð¸Ð·Ð¾Ð±ÑÐ°Ð¶ÐµÐ½Ð¸Ñ: ÐºÐ¾Ð»Ð»ÐµÐºÑÐ¸Ñ Ð¸Ð·Ð¾Ð±ÑÐ°Ð¶ÐµÐ½Ð¸Ð¹ GitHub, Unsplash API, Flickr API 

37) ÐµÑÐ»Ð¸ Ð¸ÑÑÐ¾ÑÐ½Ð¸ÐºÐ¾Ð¼ Ð¿Ð¾Ð»ÑÑÐµÐ½Ð¸Ñ ÑÐ¾ÑÐ¾ ÑÐºÐ°Ð·Ð°Ð½ API, Ð² Ð½Ð°ÑÑÑÐ¾Ð¹ÐºÐ°Ñ Ð¿ÑÐ¸Ð»Ð¾Ð¶ÐµÐ½Ð¸Ñ Ð¼Ð¾Ð¶Ð½Ð¾ ÑÐºÐ°Ð·Ð°ÑÑ ÑÐµÐ³, Ð´Ð»Ñ ÐºÐ¾ÑÐ¾ÑÐ¾Ð³Ð¾ API Ð±ÑÐ´ÐµÑ Ð¿ÑÐ¸ÑÑÐ»Ð°ÐµÑ ÑÐ¾ÑÐ¾ 

38) Ð² Ð½Ð°ÑÑÑÐ¾Ð¹ÐºÐ°Ñ Ð¿ÑÐ¸Ð»Ð¾Ð¶ÐµÐ½Ð¸Ñ Ð¼Ð¾Ð¶Ð½Ð¾ ÑÐºÑÑÑÑ/Ð¾ÑÐ¾Ð±ÑÐ°Ð·Ð¸ÑÑ Ð»ÑÐ±Ð¾Ð¹ Ð¸Ð· Ð±Ð»Ð¾ÐºÐ¾Ð², ÐºÐ¾ÑÐ¾ÑÑÐµ Ð½Ð°ÑÐ¾Ð´ÑÑÑÑ Ð½Ð° ÑÑÑÐ°Ð½Ð¸ÑÐµ: Ð²ÑÐµÐ¼Ñ, Ð´Ð°ÑÐ°, Ð¿ÑÐ¸Ð²ÐµÑÑÑÐ²Ð¸Ðµ, ÑÐ¸ÑÐ°ÑÐ° Ð´Ð½Ñ, Ð¿ÑÐ¾Ð³Ð½Ð¾Ð· Ð¿Ð¾Ð³Ð¾Ð´Ñ, Ð°ÑÐ´Ð¸Ð¾Ð¿Ð»ÐµÐµÑ, ÑÐ¿Ð¸ÑÐ¾Ðº Ð´ÐµÐ»/ÑÐ¿Ð¸ÑÐ¾Ðº ÑÑÑÐ»Ð¾Ðº/Ð²Ð°Ñ ÑÐ¾Ð±ÑÑÐ²ÐµÐ½Ð½ÑÐ¹ Ð´Ð¾Ð¿Ð¾Ð»Ð½Ð¸ÑÐµÐ»ÑÐ½ÑÐ¹ ÑÑÐ½ÐºÑÐ¸Ð¾Ð½Ð°Ð» 

39) Ð¡ÐºÑÑÑÐ¸Ðµ Ð¸ Ð¾ÑÐ¾Ð±ÑÐ°Ð¶ÐµÐ½Ð¸Ðµ Ð±Ð»Ð¾ÐºÐ¾Ð² Ð¿ÑÐ¾Ð¸ÑÑÐ¾Ð´Ð¸Ñ Ð¿Ð»Ð°Ð²Ð½Ð¾, Ð½Ðµ Ð²Ð»Ð¸ÑÑ Ð½Ð° Ð´ÑÑÐ³Ð¸Ðµ ÑÐ»ÐµÐ¼ÐµÐ½ÑÑ, ÐºÐ¾ÑÐ¾ÑÑÐµ Ð½Ð°ÑÐ¾Ð´ÑÑÑÑ Ð½Ð° ÑÑÑÐ°Ð½Ð¸ÑÐµ, Ð¸Ð»Ð¸ Ð¿Ð»Ð°Ð²Ð½Ð¾ ÑÐ¼ÐµÑÐ°Ñ Ð¸Ñ 

40) Ð½Ð°ÑÑÑÐ¾Ð¹ÐºÐ¸ Ð¿ÑÐ¸Ð»Ð¾Ð¶ÐµÐ½Ð¸Ñ ÑÐ¾ÑÑÐ°Ð½ÑÑÑÑÑ Ð¿ÑÐ¸ Ð¿ÐµÑÐµÐ·Ð°Ð³ÑÑÐ·ÐºÐµ ÑÑÑÐ°Ð½Ð¸ÑÑ 

41) ToDo List - ÑÐ¿Ð¸ÑÐ¾Ðº Ð´ÐµÐ» (ÐºÐ°Ðº Ð² Ð¾ÑÐ¸Ð³Ð¸Ð½Ð°Ð»ÑÐ½Ð¾Ð¼ Ð¿ÑÐ¸Ð»Ð¾Ð¶ÐµÐ½Ð¸Ð¸) Ð¸Ð»Ð¸ Ð¡Ð¿Ð¸ÑÐ¾Ðº ÑÑÑÐ»Ð¾Ðº (ÐºÐ°Ðº Ð² Ð¾ÑÐ¸Ð³Ð¸Ð½Ð°Ð»ÑÐ½Ð¾Ð¼ Ð¿ÑÐ¸Ð»Ð¾Ð¶ÐµÐ½Ð¸Ð¸) Ð¸Ð»Ð¸ Ð¡Ð²Ð¾Ð¹ ÑÐ¾Ð±ÑÑÐ²ÐµÐ½Ð½ÑÐ¹ Ð´Ð¾Ð¿Ð¾Ð»Ð½Ð¸ÑÐµÐ»ÑÐ½ÑÐ¹ ÑÑÐ½ÐºÑÐ¸Ð¾Ð½Ð°Ð», Ð¿Ð¾ ÑÐ»Ð¾Ð¶Ð½Ð¾ÑÑÐ¸ Ð°Ð½Ð°Ð»Ð¾Ð³Ð¸ÑÐ½ÑÐ¹ Ð¿ÑÐµÐ´Ð»Ð¾Ð¶ÐµÐ½Ð½ÑÐ¼ 
`;



